---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: podman-desktop-e2e
  labels:
    app.kubernetes.io/version: "0.1"
    redhat.com/product: podman-desktop
    dev.lifecycle.io/phase: testing
  annotations:
    tekton.dev/pipelines.minVersion: "0.24.x"
    tekton.dev/categories: podman-desktop
    tekton.dev/tags: podman-desktop, testing
    tekton.dev/displayName: "testing for podman-backend"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run qe testing on podman desktop 

  workspaces:
  - name: pipelines-data
  
  params:
  # Target host parameters
  - name: host
    description: host to connect to the provisioned machine
  - name: username
    description: username to connect to the provisioned machine
  - name: userpassword
    description: user password required to run installers with privileges
  - name: key
    description: key file name to connect to the provisioned machine within the workspace resources path   
  - name: os
    description: type of platform per target host (windows, darwin)
    default: windows
  - name: arch
    description: type of arch per target host for windows only amd64, for darwin amd64 or arm64 
    default: amd64
  - name: workspace-resources-path
    description: path on workspace to find resources to connect to the target machine
  # Podman desktop parameters
  - name: podman-desktop-version
    description: podman version to be tested
    default: '1.1.0'
  - name: pd-url
    description: in case we want to download a specific podman desktop version. We can set up the url
    default: "''"
  - name: pd-path
    description: in case we want to test an existing version on the target host we can set up the path here
    default: "''"
  # Results parameters 
  - name: worspace-qe-subpath
    description: subpath relative to workspace path where results are stored
    default: qe-results
  - name: junit-filename
    description: filename for the junit file holding the e2e results
    default: podman-desktop-e2e.xml

  results:
  - name: duration
    description: total amount of time in seconds for the qe execution

  steps:
  - name: e2e
    image: quay.io/rhqp/podman-desktop-e2e:v$(params.podman-desktop-version)-$(params.os)-$(params.arch)
    script: |
      #!/bin/bash

      # Prepare ENVs
      SECONDS=0
      TARGET_HOST=$(params.host)
      TARGET_HOST_USERNAME=$(params.username)
      TARGET_HOST_KEY_PATH=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)/$(params.key)
      chmod 600 ${TARGET_HOST_KEY_PATH}
      TARGET_FOLDER=podman-desktop-e2e
      TARGET_RESULTS=$(params.junit-filename)
      OUTPUT_FOLDER=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)/$(params.worspace-qe-subpath)
      mkdir -p "${OUTPUT_FOLDER}"
      
      # Create command
      if [[ $(params.os) == "windows" ]]; then
        cmd="${TARGET_FOLDER}/run.ps1 "
        cmd="$cmd -targetFolder ${TARGET_FOLDER} "
        cmd="$cmd -junitResultsFilename $(params.junit-filename) "
        if [[ $(params.pd-url) != "" ]]; then
          cmd="${cmd} -pdUrl $(params.pd-url) "
        else 
          cmd="${cmd} -pdPath $(params.pd-path) "
        fi
      fi
      if [[ $(params.os) == "darwin" ]]; then
        cmd="USER_PASSWORD=$(params.userpassword) "
        cmd="$cmd TARGET_FOLDER=${TARGET_FOLDER} "
        cmd="$cmd JUNIT_RESULTS_FILENAME=$(params.junit-filename) "
        if [[ $(params.pd-url) != "" ]]; then
          cmd="${cmd} PD_URL=$(params.pd-url) "
        else 
          cmd="${cmd} PD_PATH=$(params.pd-path) "
        fi
        cmd="$cmd ${TARGET_FOLDER}/run.sh"
      fi
      
      # Exec
      . entrypoint.sh "${cmd}"

      # Results
      echo -n "${SECONDS}" | tee $(results.duration.path)
      
    resources:      
      requests:
        memory: "50Mi"
        cpu: "5m"
      limits:
        memory: "70Mi"
        cpu: "10m"

  sidecars:
  - name: fake-rdp
    image: quay.io/rhqp/frdp:v0.0.1
    imagePullPolicy: Always
    env:
    - name: RDP_HOST
      value: $(params.host)
    - name: RDP_USER
      value: $(params.username)
    - name: RDP_PASSWORD
      value: $(params.userpassword)
    script: |
      #!/bin/sh
      . entrypoint.sh
      
    resources:      
      requests:
        memory: "30Mi"
        cpu: "5m"
      limits:
        memory: "70Mi"
        cpu: "10m"

  